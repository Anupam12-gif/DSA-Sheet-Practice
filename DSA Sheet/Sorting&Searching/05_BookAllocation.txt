class Solution {
  public:
    // Helper function to check if it's possible to allocate books with max 'mid' pages per student
    bool isPossible(vector<int> &arr,int n, int k,int mid){
        int studentCount = 1;
        int pageSum = 0;
        
        for(int i = 0; i < n; i++){
            // If current book can be added to current student's page sum
            if(pageSum + arr[i] <= mid){
                pageSum += arr[i];
            }
            else{
                // Assign book to next student
                studentCount++;
                // If pages of single book > mid or students exceeded, not possible
                if(studentCount > k || arr[i] > mid)
                    return false;
                pageSum = arr[i];
            }
        }
        return true;
    }

    int findPages(vector<int> &arr, int k) {
        int n = arr.size();
        
        // Edge case: if books < students, return -1
        if(k > n) return -1;
        
        int s = 0;
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += arr[i];
        }
        int e = sum;
        int ans = -1;
        int mid = s + (e - s) / 2;

        while(s <= e){
            if(isPossible(arr, n, k, mid)){
                ans = mid;
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
            mid = s + (e - s) / 2;
        }

        return ans;
    }
};
