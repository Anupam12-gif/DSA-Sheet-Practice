class Solution {
  public:
    // 8 directions: up-left, up, up-right, left, right, down-left, down, down-right
    int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[8] = {-1,  0,  1, -1, 1, -1, 0, 1};

    bool isValid(int x, int y, int n, int m) {
        return (x >= 0 && x < n && y >= 0 && y < m);
    }

    vector<vector<int>> searchWord(vector<vector<char>> grid, string word) {
        int n = grid.size();
        int m = grid[0].size();
        int len = word.length();
        vector<vector<int>> result;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] != word[0]) continue;

                bool found = false;

                for (int dir = 0; dir < 8 && !found; dir++) {
                    int x = i, y = j, k = 0;

                    while (k < len && isValid(x, y, n, m) && grid[x][y] == word[k]) {
                        x += dx[dir];
                        y += dy[dir];
                        k++;
                    }

                    if (k == len) found = true;
                }

                if (found) result.push_back({i, j});
            }
        }

        sort(result.begin(), result.end());  // Lexicographically sorted
        return result;
    }
};
