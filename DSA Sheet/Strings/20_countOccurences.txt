// User function Template for C++

class Solution {
  public:
    // 8 directions: ↖ ↑ ↗ ← → ↙ ↓ ↘
    int dx[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[8] = {-1,  0,  1, -1, 1, -1, 0, 1};

    bool isValid(int x, int y, int n, int m) {
        return x >= 0 && x < n && y >= 0 && y < m;
    }

    int findOccurrence(vector<vector<char>> &mat, string target) {
        int n = mat.size();
        int m = mat[0].size();
        int len = target.length();
        int count = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] != target[0]) continue;

                for (int dir = 0; dir < 8; dir++) {
                    int x = i, y = j, k = 0;

                    while (k < len && isValid(x, y, n, m) && mat[x][y] == target[k]) {
                        x += dx[dir];
                        y += dy[dir];
                        k++;
                    }

                    if (k == len) count++;
                }
            }
        }

        return count;
    }
};
