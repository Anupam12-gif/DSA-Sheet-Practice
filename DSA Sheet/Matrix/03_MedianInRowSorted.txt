class Solution {
  public:
    int countSmaller(vector<int> &row, int target) {
        return upper_bound(row.begin(), row.end(), target) - row.begin();
    }

    int median(vector<vector<int>> &mat) {
        int r = mat.size();
        int c = mat[0].size();
        int low = 1;
        int high = 1e9;

        while (low <= high) {
            int mid = (low + high) / 2;
            int count = 0;

            for (int i = 0; i < r; i++) {
                count += countSmaller(mat[i], mid);
            }

            // âœ… Median position is (r*c + 1)/2
            if (count < (r * c + 1) / 2)
                low = mid + 1;
            else
                high = mid - 1;
        }

        return low;
    }
};
