// âœ… Commit: Max Profit in at most k transactions | Time: O(n*k), Space: O(n)

class Solution {
  public:
    int maxProfit(vector<int>& prices, int k) {
        int n = prices.size();
        if(n == 0 || k == 0) return 0;

        // Unlimited transactions case (Greedy)
        if(k >= n / 2){
            int profit = 0;
            for(int i = 1; i < n; i++){
                if(prices[i] > prices[i - 1]){
                    profit += prices[i] - prices[i - 1];
                }
            }
            return profit;
        }

        // DP arrays to store max profit till day i with at most t transactions
        vector<int> curr(n, 0), prev(n, 0);

        for(int t = 1; t <= k; t++){
            int maxDiff = -prices[0];
            for(int i = 1; i < n; i++){
                curr[i] = max(curr[i - 1], prices[i] + maxDiff);
                maxDiff = max(maxDiff, prev[i] - prices[i]); // tracking best buy point
            }
            prev = curr;
        }

        return prev[n - 1];
    }
};
