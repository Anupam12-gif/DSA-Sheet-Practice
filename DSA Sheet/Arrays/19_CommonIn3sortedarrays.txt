// Problem: Find common elements in 3 sorted arrays (GFG-style)
// Constraint: No extra data structure (no set/map), must handle duplicates
// Time Complexity: O(n1 + n2 + n3), Space Complexity: O(1) extra space

class Solution {
  public:
    // Function to find common elements in three arrays.
    vector<int> commonElements(vector<int> &arr1, vector<int> &arr2,
                               vector<int> &arr3){
        vector<int>res;                           
        int n1=arr1.size();
        int n2=arr2.size();
        int n3=arr3.size();
        int i=0;
        int j=0;
        int k=0;
        while(i<n1 && j<n2 && k<n3){
            if(i>0 && i<n1 && arr1[i]==arr1[i-1])i++;
            if(j>0 && j<n1 && arr2[j]==arr2[j-1])j++;
            if(k>0 && k<n1 && arr3[k]==arr3[k-1])k++;
        if(i>=n1 || j>=n2 || k>=n3)break;
        if(arr1[i]==arr2[j] && arr2[j]==arr3[k]){
            res.push_back(arr1[i]);
            i++;j++;k++;
        }
        else if(arr1[i]<arr2[j])i++;
        else if(arr2[j]<arr3[k])j++;
        else k++;
        }
        if(res.size()==0)return {-1};
        return res;
    }
};